Q1-> “Algorithm X is asymptotically more efficient than Algorithm Y”,
     what does this mean?
A -> X will always be better choice for large inputs.

Q2-> If the number of primary operations of an algorithm that takes an array
     of size n as input are 3n^2 + 5n. The worst case time complexity of the
     algorithm will be ?
A -> O(n^2)

Q3-> What will be the Time Complexity of the following code in terms of ‘n’ ?

Note : Assume k to be a constant value

for(int i = 0; i < n; i++)
{
   for(int j = 1 ; j < k; j++)
    {
      cout << (i + j ) << endl;
     }
 }

A-> O(n)

Q4-> What is the time and space complexity of the following code:

   int a = 0, b = 0;    
    for (i = 0; i < N; i++) {
        a = a + 1;  
    }
    for (j = 0; j < M; j++) {
        b = b + 1;
    }

A -> O(N+M) time, O(1) space

Q5-> Consider the following for loops:

 A) for(i = 0; i < n; i++)
 B) for(i = 0; i < n; i += 2)
 C) for(i = 1; i < n; i *= 2)
 D) for(i = n; i > -1; i /= 2)

Which loop will execute fastest?

A -> C

Q6-> Given the time complexities of different functions, arrange them in increasing order:

  f1(n) = 2^n
  f2(n) = n^(5/2)
  f3(n) = nLogn
  f4(n) = n^(Logn)  

A -> f3>f3>f4>f1

Q7-> Given two 2-d arrays A and B, each array can be stored either in row-major 
   or column-major order in contiguous memory locations.

   The time complexity of an algorithm to compute A × B will be?

A -> independent of the storage scheme

Q8-> What is the time complexity of the following code ?

  int multiplyRecursive(int m, int n){
    if(n == 1)
        return m;
    return m + multiplyRec(m,  n - 1);  
  }

A -> O(n)

Q9-> The recurrence relation capturing the optimal time of the Tower of Hanoi
     problem with n discs is.

A -> 2T(n-1) + 1

Q10-> What is the time complexity of following code ?

  int sumOfDigits(int n)
  {
    int sum;
    if(n < 10){
        return n;
    }
    sum = (n % 10) + sumOfDigits(n / 10);
    return sum;
   }

A -> O(logn) log is to the base 10


